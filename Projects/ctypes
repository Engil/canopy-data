---
author: yallop (Jeremy Yallop)
title: interfacing C code
abstract: forward and backward C interfacing
tags: active project
---

- [code](https://github.com/ocamllabs/ocaml-ctypes)
- Status: several subprojects need attention

### libnqsb-tls

- [code](https://github.com/mirleft/libnqsb-tls)

### Java backend for ocaml-ctypes

Bindings to C code written using [ctypes](https://www.github.com/ocamllabs/ocaml-ctypes) are independent of the OCaml value representation, which means that we could in principle reuse them with [OCaml-Java](http://www.ocamljava.org/).  Ctypes already supports multiple backends, for dynamic call generation and static code generation, so the architecture is in place to add additional backends for OCaml-Java support.

[This message](http://lists.ocaml.org/pipermail/ctypes/2014-October/000109.html) outlines what needs to be done to extend ctypes with OCaml-Java support.

### Multi-process/vm support for ocaml-ctypes

OCaml code that interfaces with C typically involves combining two runtimes in a single process.  This weakens OCaml's safety guarantees, since a rogue C pointer can corrupt the OCaml heap.  The high-level programming model available with [ctypes](https://www.github.com/ocamllabs/ocaml-ctypes) makes it possible to switch between linking strategies without changing binding code; one such strategy is to run all foreign (C) code in a separate process or separate VM, limiting the damage it can do.

We have a prototype of this multi-process linking strategy, but work is needed to turn it into a fully usable system which supports easy switching between IPC mechanisms, robust error handling, etc.
