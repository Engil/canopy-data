---
title: Mirage.io onboarding @ Hackathon
author: GemmaG (Gemma Gordon)
abstract: First steps using Mirage tutorial
---

Onboarding with user M
- usually works in Python

mirage docs - not completely clear from this page what to do first - installation is quite hidden

personally prefers text form rather than screencast for instructions

* tuntap - link doesn't work - tuntap website doesn't work
* needs to be clearer information there about which machine you're using and what you need to have in place already (easy to miss)

* opam install stages
mostly ok info on installing opam

* install homebrew
mostly ok info re. this

* section off specific reqs with headings so you don't read unnecessary paragraphs, and know which ones to read next

* aspcud had problems downloading using homebrew, was fine when downloaded directly. Homebrew specific issue...

IN! Woop (has taken 25 mins to get to this stage from initially starting install)

* homebrew bottle (after install of opam)
confusing instructions involving eval opam config env
rather than "add them" - it should specify what you are adding

OPAM instructions:

not clear on opam.ocaml where the same instructions are for the same process

Doesn't want to add it to bashrc

* need to run opam init before opam update - error is clear but instructions are the wrong way around

* should just say run opam init as it will do all the necessary steps for you - can avoid doing others first!

* * mirageos list of instructions are clear NOT the opam instructions in terminal * *

Mirage: can just add that opam init will offer to install everything you need

* Got Mirage :)

---

Hello World docs

Skipping lwt for now as going through onboarding, but can read later for familiarity

@-> combintator is a good explanation - lwt operators could have something similar - comparisons to other languages e.g. haskell to help with those who have experience with other languages

Very text heavy - instructions, could be sectioned for easier reading - have the above in separate boxes

Not getting much useful help from all of the text - seems like a lot of it is useful to know, but not helpful as a main tutorial

hasn't read the tech background docs, but not sure (from a quick look) that they offer that much more info now - don't bridge the gap sufficiently?

not sure what a job is when reading through - could have it where you click on "job" for a definition

Maybe that he doesnt know ocaml well - but for a tutorial we need to cover that base too...

* building unix binary - ok

* step 2: block device section
useful to have explanation of the different features - e.g if higlighted with an explanation side-by-side so you don't have to leave to find it out
Not sure if console @-> is a definition of method or somwthing else

e.g no explanation of what foreign is for example
V1.block link takes you to the definition in blob, but could be more clearly described exactly what pre-requisite knowledge is assumed

"As an aside, if you have your editor configured with OCaml mode, you should be able to see the inferred types for some of the variables in the configuration file. The @-> and $ combinators are designed such that any mismatches in the declared device driver types and the concrete registered implementations will result in a type error at configuration time." - no link to how to configure your editor for example - assuming a certain level of features set up but not explicitly saying it

$ cd block
$ mirage configure --unix
$ make
$ ./generate_disk_img.sh *** DOES NOT EXIST
$ ./mir-block_test *** works ok

Can't run xen version - so doesn't need that information - could be hidden/not required reading

Skips to step 3
config.ml does look a little more familiar

Feels like he might be better placed to read an OCaml tutorial to begin with - what would be a good starter for this?
Can we link to it...
ocaml.org/learn/tutorials - crash course of mirage syntax and functions etc

$ mirage configure --unix --kv_ro fat
$ ./make-fat1-image.sh
$ file fat1.img
fat1.img: x86 boot sector, code offset 0x0, OEM-ID "ocamlfat",
sectors/cluster 4, FAT  1, root entries 512, Media descriptor 0xf8,
sectors/FAT 1, sectors 49 (volumes > 32 MB) , dos < 4.0 BootSector (0x0)
---- doesn't work with 4.03 - we should make it work with 4.03

Step 4 Networking

Not sure what is a function definition

open Mirage

let handler = foreign "Unikernel.Main" (console @-> stackv4 @-> job)

let stack = generic_stackv4 default_console tap0

let () =
  register "stackv4" [handler $ default_console $ stack]

Not sure how much he's learning now - would be good if there was an explantion of what they are doing

went back to read main.ml and unikernel.ml files e.g to find where "main" is defined.

Fouad - get it to compile and run - then look at simple code samples (skeleton)


Getting the idea that you can switch out different parts - e.g. different ways to configure networking

But the whole last part is explaining how to do the same thing but in different ways - skimmed through this

The tutorial does suggest checking main.ml to see how it works under the hood, but it's right at the bottom and easy to miss

**mirage-net-macosx is failing to compile 1.1.0- Marwan on el capitan
Failed to build - ocamlbuild fail

----
Next step:

mirage www

Reading the code as he goes along

unnecessary repetion of cd into certain folders - it's assuming you have cd'd out to top level, but if you are following the tutorial then you would already be in the right place. And assuming you are in a different directory e.g. make prepare. Can we just have it clearly explaining where you should be each time

Could have a contents to easily follow and navigate back out again

make prepare:
to build js

Fails at make build stage:
install lwt
type_conv

a lot of noise - difficult to tell what is failing where

add_debu library failing too

so searched for type_conv to install separately and searching with the error to see how to workaround

stuck at this point - can't install type_conv
https://github.com/ocaml/opam-repository/issues/4730

maybe need ocaml core?  Needed? but no type_conv - perhaps we need this first?
Still failed to install :(

Running make prepare with core installed again to see if it changes anything
NO
tried updates and upgrades - already updated as much as possible

SKIPPING trying to build it as we can't figure out why it's not building...

getting 4.02.3 to see if it works

----


Next article - deploying via CI
